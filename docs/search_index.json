[["index.html", "Economic Data Visualization 第 1 章 Prerequisites 1.1 Start a project 1.2 中文 1.3 econDV2 1.4 .Rprofile 1.5 其他", " Economic Data Visualization Dr. Lin, Mau-Ting 2021 第 1 章 Prerequisites 1.1 Start a project Start a new project for your ggplot environment: Project &gt; New Project… &gt; New Directory &gt; New Project 1.2 中文 install.packages( c(&quot;showtext&quot;,&quot;extrafont&quot;) ) sysfonts::font_families() sysfonts::font_add_google(&#39;Noto Sans TC&#39;) sysfonts::font_families() library(ggplot2) library(showtext) showtext_auto() theme_set( theme( text=element_text(family = &quot;Noto Sans TC&quot;) ) ) 你也可以在你的.Rprofile裡加上: library(ggplot2) library(showtext) sysfonts::font_add_google(&#39;Noto Sans TC&#39;) showtext_auto() theme_set( theme( text=element_text(family = &quot;Noto Sans TC&quot;) ) ) 1.3 econDV2 devtools::install_github(&quot;tpemartin/econDV2&quot;) 1.4 .Rprofile library(ggplot2) library(showtext) sysfonts::font_add_google(&#39;Noto Sans TC&#39;) showtext_auto() theme_set( theme( text=element_text(family = &quot;Noto Sans TC&quot;) )+ theme_classic() ) library(econDV2) gg &lt;- list( dash = econDV2::ggdash, geom = econDV2::ggbrowse, aes = econDV2::ggaes ) 1.5 其他 後製軟體： Choose your own image editor, but make sure it support SVG editing. Here I use Boxy SVG. 程式排版： install.packages(&quot;styler&quot;) "],["geometries-and-aesthetics.html", "第 2 章 Geometries and Aesthetics 2.1 An Example 2.2 Inheritance 2.3 Graph export", " 第 2 章 Geometries and Aesthetics Available geometries Two steps: Step 1: What geometries do you see? Step 2: With a given geometry, what aesthetics do you observe? Geometries? Aesthetics? 2.1 An Example Geom: geom_point: x, y：varies with observations color (線框顏色): constant stroke (線框粗細): constant fill (內部塗色): constant size (點的大小): constant geom_text: x, y: varies with observations label: varies with observations hjust (文字水平錨點）：between 0 and 1 vjust (文字垂直錨點）: between 0 and 1 # take Colombia, Normway, and Gemany as an example data4plot &lt;- list() data4plot$point$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58) ) } data4plot$text$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58), label=c(&quot;Colombia&quot;, &quot;Norway&quot;, &quot;Germany&quot;) ) } myplot &lt;- { ggplot()+ geom_point( data=data4plot$point$data, mapping=aes( x=x, y=y ), fill=&quot;blue&quot;, shape=21, color=&quot;black&quot;, stroke=1, size=1 )+ geom_text( data=data4plot$text$data, mapping=aes( x=x, y=y, label=label ), hjust = 1, size = 1 ) } myplot use econDV2::ggdash() to quickly create a shiny app of your ggplot to fine tune your graph. 2.1.1 econDV2::ggdash myplot &lt;- { ggplot()+ geom_point( data=data4plot$point$data, mapping=aes( x=x, y=y ), fill=&quot;blue&quot;, #input$fill_point shape=21, # default point is a circle without border, you need another type of point color=&quot;black&quot;, #input$color_point stroke=1, #input$stroke_point size=1 #input$size_point )+ geom_text( data=data4plot$text$data, mapping=aes( x=x, y=y, label=label ), hjust = 1, #input$hjust_text size = 1 #input$size_text ) } myplot myplot &lt;- { ggplot() + geom_point( data = data4plot$point$data, mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( data = data4plot$text$data, mapping = aes( x = x, y = y, label = label ), hjust = 0, size = 12 ) } myplot 2.1.2 Script saving If you are happy with your graph, you may want to make it reproducible and easy to use. Think of how you want to use it next time. Turn your script into a function, and save in a R script. Select the code lines that you want to turn into a function Code &gt; Extract Function The result after proper revision: myGoodPlot &lt;- function(data4plot) { myplot &lt;- { ggplot() + geom_point( data = data4plot$point$data, mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( data = data4plot$text$data, mapping = aes( x = x, y = y, label = label ), hjust = 0, size = 12 ) } myplot } To reuse: source(&quot;support/ggplots.R&quot;) # suppose this is where your script file is data4plot &lt;- list() data4plot$point$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58) ) } data4plot$text$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58), label=c(&quot;Colombia&quot;, &quot;Norway&quot;, &quot;Germany&quot;) ) } myGoodPlot(data4plot) If you replace data4plot with the real data, you get the accurate graph that you want. 2.1.3 Graph output Saving is tricky. You need to find the viewport ratio. (Different computers are different) Given your graph width and height, you can save your output as: dir.create(&quot;works&quot;) ggsave( filename = &quot;works/week1.png&quot;, plot=myGoodPlot(data4plot), width=930, height=400, units=&quot;mm&quot; # text size is default in mm unit ) 2.1.4 ggdash more ggdash can control any input within a programming block myplot2 &lt;- { myshape = 21 #input$shape_point ggplot() + geom_point( data = data4plot$point$data, mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = myshape, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( data = data4plot$text$data, mapping = aes( x = x + 0, #input$x_text y = y, label = label ), hjust = 0, size = 12 ) } myplot2 2.2 Inheritance 2.2.1 Data Common data source can be put in ggplot(): ALL geoms will use the same data to find aes() mapping, UNLESS the geom has its own data supplied. data = data4plot$text$data myplot &lt;- { ggplot(data = data, ) + geom_point( mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( # data = data4plot$text$data, mapping = aes( x = x, y = y, label = label ), hjust = 0, size = 12 ) } 2.2.2 Aesthetics myplot &lt;- { ggplot( data = data, mapping = aes(x=x, y=y) ) + geom_point( fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( mapping = aes( label = label ), hjust = 0, size = 12 ) } myplot plot_hightlightCountries &lt;- function(data) { myplot &lt;- { ggplot(data = data, ) + geom_point( mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( # data = data4plot$text$data, mapping = aes( x = x, y = y, label = label ), hjust = 0, size = 12 ) } myplot } 2.2.3 Stop data inheritance When a geom has its own data supplied, data inheritance stops. nonhighlightedCountries &lt;- data.frame( x=c(48, 52, 53), y=c(48, 53, 54) ) highlightedCountries &lt;- data4plot$text$data plot_allCountries &lt;- { plot_hightlightCountries(highlightedCountries) + geom_point( data = nonhighlightedCountries, aes( x=x, y=y ), size = 12, color= &quot;#a4dce6&quot; ) } plot_allCountries plot_allCountries &lt;- function(highlightedCountries, nonhighlightedCountries) { plot_hightlightCountries(highlightedCountries) + geom_point( data = nonhighlightedCountries, aes( x=x, y=y ), size = 12, color= &quot;#a4dce6&quot; ) } 2.2.4 Finish panel plot_obsessionWithBorders &lt;- { plot_allCountries( hightlightedCountries = highlightedCountries, unhighlightedCountries = unhighlightedCountries )+ geom_abline( aes( slope=1, intercept=0 ), color = &quot;#549ab6&quot;, linetype = 2, size=2 ) } plot_obsessionWithBorders plot_obsessionWithBorders + geom_abline( aes( slope=1, intercept=0 ), color = &quot;#549ab6&quot;, linetype = 2, size=2 ) hightlightXYequal &lt;- function(plot_obsessionWithBorders) { plot_obsessionWithBorders + geom_abline( aes( slope=1, intercept=0 ), color = &quot;#549ab6&quot;, linetype = 2, size=2 ) } 2.3 Graph export The easiest way to export the graph as you see on gg$dash() is to right click the image on the shiny dashboard and choose save image as to export the image. "],["layers.html", "第 3 章 Layers 3.1 Time series data 3.2 Aesthetics inheritance 3.3 Sequence of layers 3.4 Create your first geom 3.5 Summary 3.6 Exercise", " 第 3 章 Layers Geometries: geom_line Aesthetics: x, y, color; size source(&quot;support/time-trend.R&quot;) 3.1 Time series data package: lubridate Basic data types do not have time or date type. Time/Date are class that is constructed on top of character data, like &quot;2020-02-01&quot; &quot;2020-02-01 13:58:55&quot; All date/time data sources are normally input as character. It requires parsing for computer to under it is date/time. lubridate::ymd(&quot;2020-02-01&quot;) lubridate::ymd_hms(&quot;2020-02-01 13:58:55&quot;) # UTC time zone by default lubridate::ymd_hms(&quot;2020-02-01 13:58:55&quot;, tz=&quot;Asia/Taipei&quot;) date = lubridate::ymd(c(&quot;2020-02-01&quot;, &quot;2020-04-01&quot;, &quot;2020-06-01&quot;, &quot;2020-09-01&quot;)) data = list() data$Britain &lt;- data.frame( date = date, y = c(0, 50, 80, 100) ) data$Spain &lt;- data.frame( date = date, y = c(0, 32, 53, 103) ) data$Italy &lt;- data.frame( date = date, y = c(0, 50, 60, 99) ) ggplot(data=dataAll) + geom_line( aes( x=date, y=y ) ) ggplot(data=dataAll) + geom_line( aes( x=date, y=y, group=country ) ) 3.2 Aesthetics inheritance In the past, we have done data inheritance (i.e. data in ggplot()) and both data/aesthetics inheritance (i.e, data and mapping in ggplot()). Actually you can do only aesthetics inheritance as well. sizeInput = 2 #input$sizeInput plot &lt;- list() plot$p1 &lt;- { ggplot( mapping=aes( x=date, y=y ))+ geom_line( data=data$Britain, color=&quot;#096fa1&quot;, size = sizeInput )+ geom_line( data=data$Spain, color=&quot;#ad8c97&quot;, size = sizeInput )+ geom_line( data=data$Italy, color = &quot;#983d4d&quot;, size = sizeInput ) } plot$p1 3.3 Sequence of layers 3.3.1 Line stroke ggplot( mapping=aes( x=date, y=y ))+ geom_line( data=data$Britain, color=&quot;#096fa1&quot;, size = sizeInput ) + geom_line( # the last geom will be on the top data=data$Britain, color=&quot;black&quot;, size = sizeInput ) prop = 0.6 ggplot( mapping=aes( x=date, y=y ))+ geom_line( # the last geom will be on the top data=data$Britain, color=&quot;black&quot;, size = sizeInput ) + geom_line( data=data$Britain, color=&quot;#096fa1&quot;, size = sizeInput*prop ) 3.4 Create your first geom geom_lineWithStroke_error &lt;- function(data, sizeInput, prop) { geom_line( # the last geom will be on the top data=data, color=&quot;black&quot;, size = sizeInput ) + geom_line( data=data, color=&quot;#096fa1&quot;, size = sizeInput*prop ) } class(plot$p1) # ggplot class a list of 9 that complete the definitions of a plot gm &lt;- geom_line( # the last geom will be on the top data=data$Britain, color=&quot;black&quot;, size = sizeInput ) class(gm) # Layer class an environment that defines only a layer of a specific geometric structure and its aesthetics. part of a ggplot class object. + operator must have the preceding object a ggplot object. geom_lineWithStroke_error( data=data$Britain, sizeInput=2, prop=.6 ) The error comes from the function body. It uses + on two layer class objects. There is no ggplot object presented. ggplot()+... will always return a ggplot object. So all of below are ggplot objects: ggplot(), ggplot()+geom_point(...), ggplot()+geom_point(...)+geom_line(...) 3.4.1 Layer adding Instead of using + on each layers (i.e. adding geom one after the other), you can put all geom layers as a list, and use + to add the list all at once. Other than the conventional adding: ggplot( mapping=aes( x=date, y=y ))+ geom_line( data=data$Britain, color=&quot;black&quot;, size = sizeInput ) + geom_line( # the last geom will be on the top data=data$Britain, color=&quot;#096fa1&quot;, size = sizeInput*prop ) We can: ggplot( mapping=aes( x=date, y=y )) + list( geom_line( data=data$Britain, color=&quot;black&quot;, size = sizeInput ), geom_line( # the last geom will be on the top data=data$Britain, color=&quot;#096fa1&quot;, size = sizeInput*prop ) ) 3.4.2 New geom function A geom function that delivers a mixture of multiple geoms must return the mixture as a list, avoiding using + inside the function body. geom_lineWithStroke_prototype &lt;- function(data, sizeInput, prop) { list( geom_line( data=data, color=&quot;black&quot;, size = sizeInput ), geom_line( # the last geom will be on the top data=data, color=&quot;#096fa1&quot;, size = sizeInput*prop ) ) } { ggplot( mapping=aes( x=date, y=y ))+ geom_lineWithStroke_prototype( data=data$Britain, sizeInput, prop )+ geom_lineWithStroke_prototype( data=data$Spain, sizeInput, prop )+ geom_lineWithStroke_prototype( data=data$Italy, sizeInput, prop ) } 3.4.3 dot-dot-dot https://adv-r.hadley.nz/functions.html?q=dot-#fun-dot-dot-dot geom_lineWithStroke_prototype2 &lt;- function(data, sizeInput, prop, color, stroke, size) { list( geom_line( data=data, color=stroke, size = sizeInput ), geom_line( # the last geom will be on the top data=data, color=color, size = sizeInput*prop ) ) } { ggplot( mapping=aes( x=date, y=y ))+ geom_lineWithStroke_prototype2( data=data$Britain, sizeInput=sizeInput, prop=prop, color=&quot;#096fa1&quot;, stroke=&quot;white&quot; )+ geom_lineWithStroke_prototype2( data=data$Spain, sizeInput=sizeInput, prop=prop, color=&quot;#ad8c97&quot;, stroke=&quot;white&quot; )+ geom_lineWithStroke_prototype2( data=data$Italy, sizeInput=sizeInput, prop=prop, color=&quot;#983d4d&quot;, stroke=&quot;white&quot; ) } geom_lineWithStroke is an extension to an existing geom_line function. It would be better to make the input argument inline with geom_line so as to keep other geom_line options, such as linetype. help(geom_line) geom_lineWithStroke &lt;- function( mapping = NULL, data = NULL, stat = &quot;identity&quot;, position = &quot;identity&quot;, na.rm = FALSE, orientation = NA, show.legend = NA, inherit.aes = TRUE, # set up default makes your function easy to use stroke = &quot;white&quot;, prop = 0.9, size = 2, ...){ list( geom_line( data=data, color=stroke, size = size ), geom_line( # the last geom will be on the top mapping = mapping, data = data, stat = stat, position = position, na.rm = na.rm, orientation = orientation, show.legend = show.legend, inherit.aes = inherit.aes, size = size*prop, ...) ) } ... is a special argument for function. It means \"whatever input whose input name is not specified in function arguments. it can be passed directly into other functions who use .... it can be accessed via list(). mySum &lt;- function(...){ browser() argList &lt;- c(...) sum(argList) } mySum(2,3) greeting &lt;- function(name, ...){ browser() argList &lt;- list(...) extraGreeting &lt;- &quot;&quot; if(length(argList)!=0){ extraGreeting &lt;- paste(&quot; Your&quot;, names(argList), &quot; is &quot;, argList) } cat(&quot;Hi &quot;, name, &quot;. &quot;, extraGreeting) return(xx) } greeting(&quot;John&quot;, age=33) { ggplot( mapping=aes( x=date, y=y ))+ geom_lineWithStroke( data=data$Britain, color=&quot;#096fa1&quot; )+ geom_lineWithStroke( data=data$Spain, color=&quot;#ad8c97&quot; )+ geom_lineWithStroke( data=data$Italy, color=&quot;#983d4d&quot; ) } { ggplot( mapping=aes( x=date, y=y ))+ geom_lineWithStroke( data=data$Britain, color=&quot;#096fa1&quot;, linetype=2 )+ geom_lineWithStroke( data=data$Spain, color=&quot;#ad8c97&quot;, linetype=3 )+ geom_lineWithStroke( data=data$Italy, color=&quot;#983d4d&quot;, stroke=&quot;black&quot;, size=5 ) } 3.5 Summary Layers (of geoms) can be added on top of each other through + operator by either: ggplot object + geom1 + geom2; or ggplote object + list(geom1, geom2) When create a new geom function that consists of multiple geoms, use list(geom1, geom2) as function return. When writing a function input argument names: if in definition specifically WITHOUT default: it means something necessary. Users can not ignore. if in definition specifically WITH default: it means something necessary, but there is a good choice of default that users will be happy with it most of the time. ...: a flexible argument especially when our function body has a call to some other function that has ... 3.6 Exercise https://clauswilke.com/dataviz/visualizing-associations.html#associations-paired-data "],["categorical-data.html", "第 4 章 Categorical data 4.1 Aesthetics: group 4.2 Geom overlapping 4.3 Position: stack 4.4 Factor 4.5 Proportional data 4.6 Adding text 4.7 More on position 4.8 Coordination flip 4.9 Summary 4.10 Exercise", " 第 4 章 Categorical data 4.1 Aesthetics: group ggplot() + geom_line( mapping=aes( x=c(1, 2, 3), y=c(2, 3, 2), ) ) + geom_line( mapping=aes( x=c(1, 2, 3), y=c(5, 2, 6) ) ) Use group aesthetic to combine multiple same geom layers into one. ggplot() + geom_line( mapping=aes( x=c(1, 2, 3, 1, 2, 3), y=c(2, 3, 2, 5, 2, 6), group=c(&quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;), ) ) ggplot() + geom_line( mapping=aes( x=c(1, 2, 3, 1, 2, 3), y=c(2, 3, 2, 5, 2, 6), group=c(&quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;), color=c(&quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;) ) ) Any aesthetic differentiates group can replace group. ggplot() + geom_line( mapping=aes( x=c(1, 2, 3, 1, 2, 3), y=c(2, 3, 2, 5, 2, 6), # group=c(&quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;), color=c(&quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;) ) ) When there is no aesthetic mapping to differentiate groups, use group aesthetic mapping. 4.2 Geom overlapping When geom layers overlap, we can use alpha aesthetic. If multiple geometries are created within the one geom_ call (using grouping aesthetics), we can also set position: “stack,” “dodge” or “jitter” (some of them might not apply to certain geom_) https://clauswilke.com/dataviz/visualizing-proportions.html#fig:health-vs-age x is continuous, or discrete with many types y the cumulative proportion ggplot() + geom_area( mapping=aes( x=c(1, 2, 3), y=c(0.2, 0.3, 0.2), ) ) + geom_area( mapping=aes( x=c(1, 2, 3), y=c(0.4, 0.3, 0.52) + c(0.2, 0.3, 0.2) # the additive is for accumulative purpose ), alpha=0.5 ) 4.3 Position: stack put y on top of the overlapping geom’s y create accumulative result. ggplot() + geom_area( mapping=aes( x=c(1, 2, 3, 1, 2, 3), y=c(0.2, 0.3, 0.2, 0.4, 0.3, 0.52), fill=c(&quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;) ), position=&quot;stack&quot; #input$position ) stack position is accumulative; no need to compute the accumulative value yourself. the default position in geom_area is “stack.” Therefore, you can omit position argument. data_cat1 &lt;- data.frame( x=c(1, 2, 3, 1, 2, 3), y=c(0.2, 0.3, 0.2, 0.4, 0.4, 0.52), fill=c(&quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;) ) ggplot( data=data_cat1 ) + geom_area( mapping=aes( x=x, y=y, fill=fill ) ) When aesthetic mapping involves with unordered data, it will convert the data series into factor (unless the series is already a factor); conduct the mapping according to the level sequence of the converted factor. data_cat1$fill |&gt; factor() |&gt; levels() 4.4 Factor When grouping aesthetics vary the look of geometries across different groups of data, it is crucial that users declare the mapped series with proper class. factor(data_series, levels) parses data_series into a categorical data with expressing sequence defined by levels. If omit levels the level sequence will be determined by the collateral sequence defined by your operating system. ggplot( data=data_cat1 ) + geom_area( mapping=aes( x=x, y=y, fill=factor(fill, levels=c(&quot;m&quot;, &quot;f&quot;)) ) ) Here we declare factor on-the-go. We can also declare factor in the data frame first: data_cat1_copy &lt;- data_cat1 data_cat1_copy$fill |&gt; factor(levels=c(&quot;m&quot;, &quot;f&quot;)) -&gt; data_cat1_copy$fill |&gt; is a R 4.0+ equipped operator, which makes: f(x, ....) # equivalent to x |&gt; f(...) ggplot( data=data_cat1_copy ) + geom_area( mapping=aes( x=x, y=y, fill=fill ) ) 4.5 Proportional data data_cat2_wide &lt;- data.frame( x=c(1, 2, 3), y_a=c(0.2, 0.3, 0.2), y_b=c(0.4, 0.4, 0.52), y_c=c(0.4, 0.3, 0.28) ) data_cat2_wide |&gt; tidyr::pivot_longer( cols=y_a:y_c, names_to = &quot;fill&quot;, values_to= &quot;y&quot; ) -&gt; data_cat2 View(data_cat2) ggplot( data=data_cat2 ) + geom_area( mapping=aes( x=x, y=y, fill=fill ), color=&quot;white&quot; ) When x mapping series has limited cases and is discrete, a bar chart with position dodge is better. ggplot( data=data_cat2 ) + geom_col( mapping=aes( x=x, y=y, fill=fill ), color=&quot;white&quot;, width=0.8, #input$width size=0, #input$size position = &quot;dodge&quot; #input$position ) width: the width of the bar size: the size of the stroke Pie chart: not good for comparing proportion across more than one dimension library(dplyr) data_cat2 %&gt;% filter( x==1 ) -&gt; data_cat2_x1only ggplot( data=data_cat2_x1only ) + geom_col( aes( x=x, y=y, fill=fill ) ) ggplot( data=data_cat2_x1only ) + geom_col( aes( x=x, y=y, fill=fill ) ) + coord_polar( theta = &quot;y&quot; ) 4.6 Adding text adding text ggplot( data=data_cat2_x1only ) + geom_col( aes( x=x, y=y, fill=fill ) ) + geom_text( aes( x=x, y=y, label=fill ), position = &quot;stack&quot; ) geom_col stack sequence is based on fill level sequence. geom_text stack sequence is based on observation sequence. Grouping aesthetics determine the sequence of stacking. In geom_col, fill is the grouping aesthetic. To make geom_text stack labels in sequence as fill in geom_col, we can put group=fill in geom_text to create such a sequence. ggplot( data=data_cat2_x1only ) + geom_col( aes( x=x, y=y, fill=fill ) ) + geom_text( aes( x=x, y=y, label=fill, group=fill ), position = &quot;stack&quot; ) Change labels to represent the proportion values of y ggplot( data=data_cat2_x1only ) + geom_col( aes( x=x, y=y, fill=fill ) ) + geom_text( aes( x=x, y=y, label=y, # use y to label now group=fill ), position = &quot;stack&quot; ) position argument also takes position functions. When you know what type of position you want, you can use corresponding position function to fine tune the position. ggplot( data=data_cat2_x1only ) + geom_col( aes( x=x, y=y, fill=fill ) ) + geom_text( aes( x=x, y=y, label=y, group=fill ), position = position_stack(vjust=0.5) ) ggplot( data=data_cat2_x1only ) + geom_col( aes( x=x, y=y, fill=fill ) ) + geom_text( aes( x=x, y=y, label=y, group=fill ), position = position_stack(vjust=0.5) ) + coord_polar( theta = &quot;y&quot; ) + theme_void() When x-axis is also representing a categorical data: ggplot( data=data_cat2 ) + # geom_col( # mapping=aes( # x=x, # y=y, # fill=fill # ), # color=&quot;white&quot;, # width=0.8, #input$width # size=0, #input$size # position = &quot;dodge&quot; #input$position # )+ geom_text( mapping=aes( x=x, y=y, group=fill, label=y ), position=position_dodge(width=2) ) 4.7 More on position https://ggplot2.tidyverse.org/reference/index.html#section-position-adjustment 4.8 Coordination flip ggplot()+ geom_col( mapping= aes( x=c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), y=c(56, 77, 92) ) )+ coord_flip() Another common application of coord_flip is: dx=4 #input$dx h=0.5 #input$h dt=0 #input$dt ggplot()+ geom_col( mapping=aes( x=c(1, 1), y=c(306, 232), fill=c(&quot;biden&quot;,&quot;trump&quot;) ), width=1 )+ geom_segment( mapping=aes( x=1-h, y=270, xend=1+h, yend=270 ) )+ geom_text( mapping=aes( x=1+dt, y=270, label=&quot;270&quot; ), size=8 #input$text )+ xlim(1-dx, 1+dx)+ # make sure cover 0.5-1.5 so the bar width can be accomodate coord_flip()+ theme_void()+ theme(legend.position = &quot;none&quot;) 4.9 Summary Grouping aesthetic separate a data frame into various subsample data frame and apply the geom_ function to each one of them in the sequence determined by the mapping factor’s levels sequence. When group aesthetic and other aesthetic share the same mapping variable, group aesthetic can be ignored. When deal with grouping variable, values of y from different groups at the same x can have position choice: “identity”: respect ys as it is. “stack”: stack ys according to grouping level sequence. “dodge”: respect ys as it is but move their x values left and right according to grouping level sequence. 4.10 Exercise 1 2 3 4 "],["color.html", "第 5 章 Color 5.1 Group aesthetics", " 第 5 章 Color date = lubridate::ymd(c(&quot;2020-02-01&quot;, &quot;2020-04-01&quot;, &quot;2020-06-01&quot;, &quot;2020-09-01&quot;)) data = list() data$Britain &lt;- data.frame( date = date, y = c(0, 50, 80, 100) ) data$Spain &lt;- data.frame( date = date, y = c(0, 32, 53, 103) ) data$Italy &lt;- data.frame( date = date, y = c(0, 50, 60, 99) ) dataAll &lt;- purrr::map_dfr( names(data), ~{ cbind(data[[.x]], data.frame(country=.x)) } ) dataAll is a grouped data 5.1 Group aesthetics When you have a grouped data frame and intend to draw by groups, you need to set the aesthetics group equal to the group variable in your data frame. Without group aes: ggplot(data = dataAll) + geom_line( aes( x = date, y = y ) ) With group aes: ggplot(data = dataAll) + geom_line( aes( x = date, y = y, group = country ) ) Using aesthetics other than x, y can function as group aesthetic as well: ggplot(data = dataAll) + geom_line( aes( x = date, y = y, linetype = country ) ) ggplot(data = dataAll) + geom_line( aes( x = date, y = y, color = country ) ) "]]
